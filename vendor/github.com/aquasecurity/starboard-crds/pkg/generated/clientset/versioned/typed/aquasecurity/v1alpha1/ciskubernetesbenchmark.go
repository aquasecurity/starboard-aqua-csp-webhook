// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1alpha1 "github.com/aquasecurity/starboard-crds/pkg/apis/aquasecurity/v1alpha1"
	scheme "github.com/aquasecurity/starboard-crds/pkg/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// CISKubernetesBenchmarksGetter has a method to return a CISKubernetesBenchmarkInterface.
// A group's client should implement this interface.
type CISKubernetesBenchmarksGetter interface {
	CISKubernetesBenchmarks() CISKubernetesBenchmarkInterface
}

// CISKubernetesBenchmarkInterface has methods to work with CISKubernetesBenchmark resources.
type CISKubernetesBenchmarkInterface interface {
	Create(*v1alpha1.CISKubernetesBenchmark) (*v1alpha1.CISKubernetesBenchmark, error)
	Update(*v1alpha1.CISKubernetesBenchmark) (*v1alpha1.CISKubernetesBenchmark, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.CISKubernetesBenchmark, error)
	List(opts v1.ListOptions) (*v1alpha1.CISKubernetesBenchmarkList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.CISKubernetesBenchmark, err error)
	CISKubernetesBenchmarkExpansion
}

// cISKubernetesBenchmarks implements CISKubernetesBenchmarkInterface
type cISKubernetesBenchmarks struct {
	client rest.Interface
}

// newCISKubernetesBenchmarks returns a CISKubernetesBenchmarks
func newCISKubernetesBenchmarks(c *AquasecurityV1alpha1Client) *cISKubernetesBenchmarks {
	return &cISKubernetesBenchmarks{
		client: c.RESTClient(),
	}
}

// Get takes name of the cISKubernetesBenchmark, and returns the corresponding cISKubernetesBenchmark object, and an error if there is any.
func (c *cISKubernetesBenchmarks) Get(name string, options v1.GetOptions) (result *v1alpha1.CISKubernetesBenchmark, err error) {
	result = &v1alpha1.CISKubernetesBenchmark{}
	err = c.client.Get().
		Resource("ciskubernetesbenchmarks").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of CISKubernetesBenchmarks that match those selectors.
func (c *cISKubernetesBenchmarks) List(opts v1.ListOptions) (result *v1alpha1.CISKubernetesBenchmarkList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.CISKubernetesBenchmarkList{}
	err = c.client.Get().
		Resource("ciskubernetesbenchmarks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested cISKubernetesBenchmarks.
func (c *cISKubernetesBenchmarks) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("ciskubernetesbenchmarks").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a cISKubernetesBenchmark and creates it.  Returns the server's representation of the cISKubernetesBenchmark, and an error, if there is any.
func (c *cISKubernetesBenchmarks) Create(cISKubernetesBenchmark *v1alpha1.CISKubernetesBenchmark) (result *v1alpha1.CISKubernetesBenchmark, err error) {
	result = &v1alpha1.CISKubernetesBenchmark{}
	err = c.client.Post().
		Resource("ciskubernetesbenchmarks").
		Body(cISKubernetesBenchmark).
		Do().
		Into(result)
	return
}

// Update takes the representation of a cISKubernetesBenchmark and updates it. Returns the server's representation of the cISKubernetesBenchmark, and an error, if there is any.
func (c *cISKubernetesBenchmarks) Update(cISKubernetesBenchmark *v1alpha1.CISKubernetesBenchmark) (result *v1alpha1.CISKubernetesBenchmark, err error) {
	result = &v1alpha1.CISKubernetesBenchmark{}
	err = c.client.Put().
		Resource("ciskubernetesbenchmarks").
		Name(cISKubernetesBenchmark.Name).
		Body(cISKubernetesBenchmark).
		Do().
		Into(result)
	return
}

// Delete takes name of the cISKubernetesBenchmark and deletes it. Returns an error if one occurs.
func (c *cISKubernetesBenchmarks) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("ciskubernetesbenchmarks").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *cISKubernetesBenchmarks) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("ciskubernetesbenchmarks").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched cISKubernetesBenchmark.
func (c *cISKubernetesBenchmarks) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.CISKubernetesBenchmark, err error) {
	result = &v1alpha1.CISKubernetesBenchmark{}
	err = c.client.Patch(pt).
		Resource("ciskubernetesbenchmarks").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
